R2DBC
=====
1. JPA is a specification
    It is for traditional synchronous programming.
2. R2DBC is a separate specification
    For reactive programming.
3. R2DBC != JPA
4. Prioritizes
    1. Performance
    2. Scalability
    3. Streaming + Backpressure
5. It does NOT have features like
    @OneToMany
    @ManyToMany

Driver Implementations
======================
1. oracle
2. h2
3. maria
4. mssql
5. mysql
6. postgresql

Driver Config
=============
h2 - r2dbc:h2:mem:///userdb
postgres - r2dbc:postgresql://localhost:5432/userdb
mysql - r2dbc:mysql://localhost:3306/userdb

Reactive Manifesto => Reactive Systems
======================================
Responsive      - The ability of the system to react / respond quickly.
Resilient       - The ability of the system to stay responsive even in case of failures.
Elastic         - The ability of the system to stay responsive even under varying workload / system resources.
Message Driven  - The ability of the systems to communicate using the messages in a non-blocking manner
                  by applying back pressure if necessary.

Need for DTO (Data Transfer Object)
============
Advantages
==========
     1. Decoupling
            DB Table vs API
     2. Security
            Data exposure
            Customer entity might have password field. CustomerDTO might not have passsword.
     3. Versioning
     4. Validation

Problem Detail
==============
Type    - A link to the documentation for the callers to read more about the problem. If its not
          provided. "about:blank" is assumed.
title   - Human readable summary of the problem.
status  - HTTP status code.
detail  - Detailed message specific to the problem.
instance- The URI which caused the problem.

Web Client
==========
1. Reactor based fluent API for making HTTP requests.
    Wrapper around reactor-netty.
2. Non-Blocking.
3. Immutable.
4. Thread safe.
